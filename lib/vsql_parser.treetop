grammar VSql

  rule query
    space*
    select_statement
    (space from_statement (space join_statement)*
      (space where_statement)?
      (space group_by_statement)?
      (space having_statement)?
      (space window_statement)*
      (space order_by_statement)?
      (space limit_statement)?
      )?
    (space* 'union' space query)?
    (space / ';')*
    <Query>
  end

  rule select_statement
    'select' space (distinct_predicate space)? select_expressions <SelectStatement>
  end

  rule join_statement
    ('left' / 'outer' / 'inner' / 'right' / 'full' / space)* 'join' space expression (space alias)? space 'on' space expression
  end

  rule where_statement
    'where' space expression
  end

  rule having_statement
    'having' space expression
  end

  rule window_statement
    'window' space field_entity space 'as' space window
  end

  rule group_by_statement
    'group by' space expression (expression_separator expression)* <Statement>
  end

  rule order_by_statement
    'order by' space order_by_expression (expression_separator order_by_expression)* <Statement>
  end

  rule limit_statement
    'limit' space [0-9]+
  end

  rule select_expressions
    select_expression (expression_separator select_expression)* <Entity>
  end

  rule expression_separator
    space* ',' space* <Entity>
  end

  rule order_by_expression
    expression (space ('desc' / 'asc'))?
  end

  rule select_expression
    expression (space alias)? <SelectExpression>
  end

  rule alias
    ('as' space)?
    (
      '"' ([^\"]+ <Alias>) '"'
      /
      !(keyword word_boundary) [\w]+ <Alias>
    )
  end

  rule expression
    ('not' space)?
    (
      '(' query ')' <Query>
      /
      '(' space? expression space? ')' <Entity>
      /
      sub_expression)
    ('::' [\w]+)? # cast
    (space? set_operator space? (set))*
    (space? inline_window)?
    (space? operator space? expression)?
  end

  rule inline_window
    'over' space (window / field_entity)
  end

  # poorman window parsing right now... we'll need to beef this up if we use windows with parentheses
  rule window
    '(' [^\)]* ')'
  end

  rule set
    set_literal
    /
    '(' query ')'
  end

  rule distinct_predicate
    'distinct' / 'all'
  end

  rule set_literal
    '(' space? primitive_literal (space? ',' space? primitive_literal)* space? ')'
  end

  rule primitive_literal
    numeric_literal / string_literal
  end

  rule numeric_literal
    [0-9]+ ("." [0-9]+)?
  end

  rule sub_expression
    case_statement
    /
    function
    /
    primitive_literal
    /
    field_entity
  end

  rule set_operator
    'not in' / 'in' &space
  end

  rule operator
    [+\-/=\|><!]+
    /
    ('is not' / 'is' / 'like' / 'between' / 'and' / 'or') &space
  end

  rule case_statement
    'case'
    (space !('when') expression)?
    (space 'when' space expression space 'then' space expression)*
    (space 'else' space expression)?
    space 'end' <Entity>

  end

  rule function
    [\w]+ space* '(' (distinct_predicate space)? (expression / ',' / space)* ')' <Function>
  end

  rule string_literal
    "'" [^\']+ "'"
  end

  rule field_entity
    '"' [\w\.\* ]+ '"' <QuotedEntity>
    /
    [\w\.\*]+ <Entity>
  end

  rule from_statement
    'from' space+ from_expression (space alias)? <Statement>
  end

  rule from_expression
    [\w]+ <Entity>
    /
    '(' query ')' <Entity>
  end

  # matches at least one space. Handles comments, too.
  rule space
    ([\s]+ / ('--' (!"\n" .)+ ))+
  end

  rule word_boundary
    ![\w]
  end

  rule keyword
    # 'select' / 'from' / 'inner' / 'outer' / 'full' / 'left' / 'right' / 'join' / 'on' / 'where' / 'group by' / 'order by' / 'having' / 'limit' / 'union'
    (
      'all' / 'analyse' / 'analyze' / 'and' / 'any' / 'array' / 'asc' / 'as' /
      'binary' / 'both' /
      'case' / 'cast' / 'check' / 'column' / 'constraint' / 'correlation' / 'create' / 'current_database' / 'current_date' / 'current_schema' / 'current_timestamp' / 'current_time' / 'current_user' /
      'default' / 'deferrable' / 'desc' / 'distinct' / 'do' /
      'else' / 'encoded' / 'end' / 'except' /
      'false' / 'foreign' / 'for' / 'from' /
      'grant' / 'grouped' / 'group' /
      'having' /
      'initially' / 'intersect' / 'intervalym' / 'interval' / 'into' / 'in' /
      'join' /
      'ksafe' /
      'leading' / 'limit' / 'localtimestamp' / 'localtime' /
      'match' /
      'new' / 'not' / 'nullsequal' / 'null' /
      'offset' / 'off' / 'old' / 'only' / 'on' / 'order' / 'or' /
      'pinned' / 'placing' / 'primary' / 'projection' /
      'references' /
      'schema' / 'segmented' / 'select' / 'session_user' / 'some' / 'sysdate' /
      'table' / 'then' / 'timeseries' / 'to' / 'trailing' / 'true' /
      'unbounded' / 'union' / 'unique' / 'unsegmented' / 'user' / 'using' /
      'when' / 'where' / 'window' / 'within' / 'with'
    )
    word_boundary
  end

end
